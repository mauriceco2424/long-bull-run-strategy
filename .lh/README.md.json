{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1757495808892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757496184579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,12 @@\n 1. **Development Environment Setup**:\r\n    > ⚠️ **Important**: Run steps 2-4 in **command prompt/terminal** (not VS Code/Cursor) to avoid file locking issues during folder/workspace renaming. After `/initialize` completes, open the renamed workspace file in your IDE.\r\n \r\n 2. **Clone Skeleton**:\r\n+   cd into the folder where you want to setup your strat\r\n    ```bash\r\n-   git clone https://github.com/mauriceco2424/trading_bot_skeleton.git your-strategy-folder\r\n-   cd your-strategy-folder\r\n+   git clone https://github.com/mauriceco2424/trading_bot_skeleton.git\r\n+   cd trading_bot_skeleton\r\n    ```\r\n \r\n 3. **Define Your Strategy**:\r\n    Edit `docs/SMR.md` following the `docs/guides/STRAT_TEMPLATE.md` format.\r\n"
                },
                {
                    "date": 1757496299994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n    ```\r\n    This **automatically**:\r\n    - Reads strategy name from `docs/SMR.md` (e.g., \"RSI Momentum Strategy\")\r\n    - Creates GitHub repository: `your-strategy`\r\n-   - Renames folder `skeleton` → `your-strategy`  \r\n+   - Renames folder `trading_bot_skeleton` → `your-strategy`  \r\n    - Updates workspace file: `your-strategy.code-workspace`\r\n    - Updates all files with your strategy name\r\n    - Sets up clean git repository with remote origin\r\n    - Makes initial commit and pushes to GitHub\r\n"
                },
                {
                    "date": 1757499115588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n    Edit `docs/SMR.md` following the `docs/guides/STRAT_TEMPLATE.md` format.\r\n    **Key**: Update the `**Name**: <Strategy Name>` field with your actual strategy name.\r\n \r\n 4. **Initialize Your Strategy Project**:\r\n+   Activate claude\r\n    ```bash\r\n    /initialize\r\n    ```\r\n    This **automatically**:\r\n"
                }
            ],
            "date": 1757495808892,
            "name": "Commit-0",
            "content": "# Trading Strategy Framework Skeleton\r\n\r\nA production-ready framework for building, backtesting, and optimizing trading strategies using Claude Code agents and a sophisticated pipeline architecture.\r\n\r\n## 🚀 Quick Start\r\n\r\n### **Prerequisites**\r\n- **Git Bash** (required for automated GitHub integration)\r\n- **GitHub CLI** installed (`gh auth login` completed)\r\n\r\n### **New Strategy Project Initialization**\r\n\r\n1. **Development Environment Setup**:\r\n   > ⚠️ **Important**: Run steps 2-4 in **command prompt/terminal** (not VS Code/Cursor) to avoid file locking issues during folder/workspace renaming. After `/initialize` completes, open the renamed workspace file in your IDE.\r\n\r\n2. **Clone Skeleton**:\r\n   ```bash\r\n   git clone https://github.com/mauriceco2424/trading_bot_skeleton.git your-strategy-folder\r\n   cd your-strategy-folder\r\n   ```\r\n\r\n3. **Define Your Strategy**:\r\n   Edit `docs/SMR.md` following the `docs/guides/STRAT_TEMPLATE.md` format.\r\n   **Key**: Update the `**Name**: <Strategy Name>` field with your actual strategy name.\r\n\r\n4. **Initialize Your Strategy Project**:\r\n   ```bash\r\n   /initialize\r\n   ```\r\n   This **automatically**:\r\n   - Reads strategy name from `docs/SMR.md` (e.g., \"RSI Momentum Strategy\")\r\n   - Creates GitHub repository: `your-strategy`\r\n   - Renames folder `skeleton` → `your-strategy`  \r\n   - Updates workspace file: `your-strategy.code-workspace`\r\n   - Updates all files with your strategy name\r\n   - Sets up clean git repository with remote origin\r\n   - Makes initial commit and pushes to GitHub\r\n\r\n   **No manual GitHub repo creation needed!**\r\n\r\n5. **Open Your Strategy in IDE**:\r\n   ```bash\r\n   # Open the renamed workspace file in VS Code/Cursor\r\n   code {strategy-name}.code-workspace\r\n   ```\r\n\r\n6. **Setup Dependencies and Validation**:\r\n   ```bash\r\n   /validate-setup\r\n   ```\r\n   (This automatically runs `pip install -r requirements.txt` if dependencies are missing)\r\n\r\n7. **Build and Test Your Strategy**:\r\n   ```bash\r\n   /validate-strategy && /plan-strategy && /build-engine\r\n   /run && /analyze-single-run && /evaluate-single-run\r\n   ```\r\n\r\n## 🌿 Git Branching Workflow\r\n\r\nThe framework automatically sets up professional Git branching for safe strategy development:\r\n\r\n### **Branch Strategy**\r\n- **`main`**: Production-ready, tested strategy versions  \r\n- **`develop`**: Integration branch for combining features\r\n- **`feature/[change-description]`**: Individual improvements or experiments\r\n\r\n### **Development Workflow**\r\n```bash\r\n# Create feature branch from develop\r\ngit checkout develop && git checkout -b feature/improve-entry-logic\r\n\r\n# Develop and test your changes\r\n/run && /analyze-single-run && /evaluate-single-run\r\n\r\n# Create pull request when ready\r\ngh pr create --base develop --title \"Improve entry logic\"\r\n```\r\n\r\n### **Branch Naming Conventions**\r\n- `feature/optimize-rsi-thresholds`\r\n- `feature/add-volume-filter` \r\n- `experiment/test-momentum-signals`\r\n- `bugfix/fix-position-sizing`\r\n\r\n### **Merge Guidelines**\r\n✅ **Merge when**: Performance improves, all validation hooks pass, robustness confirmed  \r\n❌ **Don't merge**: Untested changes, performance degrades, validation failures\r\n\r\n\r\n## 📋 What This Skeleton Provides\r\n\r\n### 🤖 **6 Specialized Agents**\r\n\r\n**Common Agents:**\r\n- **trading-orchestrator**: Coordinates pipeline, manages quality gates, handles documentation\r\n- **trading-builder**: Implements backtest engines, optimizes performance, writes ECNs\r\n\r\n**Single-Run Agents:**\r\n- **trading-single-analyzer**: Executes backtests AND processes single run data, generates artifacts and visualizations\r\n- **trading-single-evaluator**: Evaluates single-run performance and generates PDF reports\r\n\r\n**Optimization Agents:**\r\n- **trading-optimizer**: Executes parameter sweeps AND processes optimization studies into parameter performance matrices with walk-forward analysis\r\n- **trading-optimization-evaluator**: Evaluates parameter optimization results and generates optimization reports\r\n\r\n### ⚡ **Streamlined Command System**\r\n\r\n**Setup & Planning (4 commands):**\r\n| Command | Purpose |\r\n|---------|---------|\r\n| `/validate-setup` | Validate framework setup and dependencies |\r\n| `/validate-strategy` | Validate strategy specification |\r\n| `/plan-strategy` | Plan strategy development approach |\r\n| `/build-engine` | Build trading engine and generate parameter template |\r\n\r\n**Single-Run Path (3 commands):**\r\n| Command | Purpose |\r\n|---------|---------|\r\n| `/run` | Execute single backtest with parameter_config.md |\r\n| `/analyze-single-run` | Process single run data into metrics and visualizations |\r\n| `/evaluate-single-run` | Evaluate single-run performance and generate PDF report |\r\n\r\n**Optimization Path (2 commands):**\r\n| Command | Purpose |\r\n|---------|---------|\r\n| `/run-optimization` | Execute parameter sweep AND process optimization study into parameter performance matrices |\r\n| `/evaluate-optimization` | Evaluate parameter optimization and generate optimization report |\r\n\r\n### 🔧 **Production Hook System**\r\n- **6 core hooks** with P0/P1/P2 priorities\r\n- Resource validation, artifact integrity, accounting checks\r\n- Configurable timeouts and error handling\r\n- Safety hooks for lookahead and accounting validation\r\n\r\n### 📚 **Documentation Framework**\r\n- **EMR/SMR**: Engine and Strategy Master Reports with versioning\r\n- **ECL/SCL**: Append-only changelogs\r\n- **ECN/SER/SDCN**: Change notices and evaluation reports\r\n- JSON schemas for all data structures\r\n\r\n## 🏗️ Architecture\r\n\r\n### **Directory Structure**\r\n```\r\n├── .claude/                    # Claude Code configuration\r\n│   ├── agents/                # 6 specialized agents\r\n│   └── commands/              # 9 streamlined commands\r\n├── docs/                      # Authoritative documentation\r\n│   ├── runs/                  # Run registry and results\r\n│   └── schemas/               # JSON schemas\r\n├── configs/                   # Strategy configurations\r\n├── tools/hooks/               # Hook system\r\n│   ├── core/                  # Essential hooks\r\n│   ├── lib/                   # Hook infrastructure\r\n│   └── config/                # Hook configuration\r\n├── cloud/                     # State management\r\n│   ├── tasks/                 # Task planning\r\n│   └── state/                 # Runtime state\r\n└── data/                      # Run data (not committed)\r\n    ├── runs/                  # Backtest results\r\n    └── sandbox/               # Development data\r\n```\r\n\r\n### **Dual Workflow Paths**\r\n\r\n**Single-Run Workflow:**\r\n1. **Setup** → `/validate-setup` → `/validate-strategy` → `/plan-strategy` → `/build-engine`\r\n2. **Execute** → `/run` → `/analyze-single-run` → `/evaluate-single-run`\r\n\r\n**Parameter Optimization Workflow:**\r\n1. **Setup** → Same as single-run setup (+ create optimization_config.json)\r\n2. **Execute** → `/run-optimization` → `/evaluate-optimization`\r\n\r\n### **Quality Gates**\r\n- **Docs Fresh Gate**: EMR/SMR in sync with latest changes\r\n- **Pre-run Gates**: Tests pass, no conflicting runs\r\n- **Post-run Gates**: Artifacts complete, anomalies flagged\r\n\r\n## 🎯 Usage Examples\r\n\r\n### **Single-Run Strategy Development**\r\n\r\n```bash\r\n/validate-setup && /validate-strategy && /plan-strategy && /build-engine\r\n/run && /analyze-single-run && /evaluate-single-run\r\n```\r\n\r\n### **Parameter Optimization Study**\r\n\r\n```bash\r\n/validate-setup && /validate-strategy && /plan-strategy && /build-engine\r\n# Create optimization_config.json with parameter ranges\r\n/run-optimization && /evaluate-optimization\r\n```\r\n\r\n## 🔒 Safety & Validation\r\n\r\n- **No-lookahead enforcement**: Features use data ≤ t for actions at t+1\r\n- **Accounting integrity**: Rigorous P&L tracking with fees/slippage\r\n- **Deterministic execution**: Seeded operations for reproducibility\r\n- **Statistical validation**: Multiple-testing corrections, overfitting detection\r\n- **Realism checks**: Liquidity, slippage, trade density validation\r\n\r\n## 📊 Output Artifacts\r\n\r\n### **Clean Script vs Data Separation**\r\n\r\n**Scripts** (`scripts/` folder - organized by agent):\r\n- `scripts/engine/` - Complete backtest engine with optimization components (generated by `/build-engine`)\r\n- `scripts/analyzer/` - Run execution coordination \r\n- `scripts/single_analysis/` - Performance analysis\r\n- `scripts/single_evaluation/` - Strategy evaluation and reports\r\n- `scripts/optimization/` - High-performance parameter optimization with speed optimizations\r\n- `scripts/opt_evaluation/` - Optimization evaluation\r\n\r\n**Data** (`data/` folder - generated outputs only):\r\n- `data/runs/{run_id}/` - Individual backtest outputs\r\n  - `manifest.json`: Run metadata and hashes\r\n  - `metrics.json`: Performance statistics\r\n  - `trades.csv`, `events.csv`, `series.csv`: Detailed data\r\n  - `figures/`: Professional visualizations\r\n- `data/optimization/{study_id}/` - Parameter optimization studies\r\n- `data/reports/` - Generated PDF reports\r\n- `data/cache/` - Data fetching cache\r\n\r\n## 🛠️ Customization\r\n\r\n### **Adding New Strategies**\r\n1. Create strategy specification (.md)\r\n2. Use `/validate-setup` → `/validate-strategy` → `/plan-strategy` to plan implementation\r\n3. Framework builds everything automatically with `/build-engine`\r\n\r\n### **Extending Hooks**\r\nAdd custom hooks in `tools/hooks/extended/` with proper priority and error handling.\r\n\r\n### **Custom Agents**\r\nExtend agent capabilities by modifying `.claude/agents/` configurations.\r\n\r\n## 📈 Performance\r\n\r\n- **Universal Speed Optimization**: Significant speedup for parameter sweeps through FilterGateManager, feature caching, and reference run optimization\r\n- **Strategy-Agnostic**: Speed optimizations work with ANY trading strategy automatically\r\n- **Memory efficient**: Configurable caching with resource profiling\r\n- **Hardware-aware**: Auto-configures based on system capabilities\r\n- **Incremental computation**: Monotone gate shortcuts and universe reduction for faster iterations\r\n\r\n## 📖 Documentation Guide\r\n\r\nAll user guides and documentation are organized in `docs/guides/`:\r\n\r\n| Document | Purpose |\r\n|----------|---------|\r\n| 📋 **[STRAT_TEMPLATE.md](docs/guides/STRAT_TEMPLATE.md)** | Strategy specification template - **Use this to define your strategy** |\r\n| 📖 **[User-Guide.md](docs/guides/User-Guide.md)** | Complete user manual with commands, optimization benefits, visualization system, and best practices |\r\n\r\n**Quick Start**: Begin with `docs/guides/STRAT_TEMPLATE.md` to define your strategy, then follow the complete workflow in `docs/guides/User-Guide.md`.\r\n\r\n## 🤝 Contributing\r\n\r\nThis is a skeleton framework. Customize for your specific needs:\r\n- Add domain-specific features\r\n- Extend hook system for your workflows  \r\n- Modify agents for specialized strategies\r\n- Add custom validation rules\r\n\r\n## 🔧 Troubleshooting\r\n\r\n### **Screen Flickering Issues**\r\nIf you experience screen flickering during agent operations (especially on Windows), set Git Bash as your default terminal in VS Code:\r\n\r\n1. **In VS Code**: Open Command Palette (Ctrl+Shift+P)\r\n2. Type: \"Terminal: Select Default Profile\"\r\n3. Choose: \"Git Bash\" to set it as your default terminal\r\n4. Restart your terminal\r\n\r\nThis resolves flickering issues caused by terminal output buffering and provides a smoother experience with Claude Code agents.\r\n\r\n### **GitHub CLI Setup**\r\nFor automated repository creation, ensure GitHub CLI is properly configured:\r\n\r\n1. **Install GitHub CLI**: Download from https://cli.github.com/ or use `winget install GitHub.cli`\r\n2. **Authenticate**: Run `gh auth login` and follow the prompts\r\n3. **Verify**: Test with `gh auth status` to confirm authentication\r\n4. **Permissions**: Ensure your GitHub token has repository creation permissions\r\n\r\n**Note**: The `/initialize` command requires Git Bash and authenticated GitHub CLI to automatically create and configure your strategy repository.\r\n\r\n## 📝 License\r\n\r\nMIT License - Use freely for your trading strategy development.\r\n\r\n---\r\n\r\n**Ready to build your next profitable strategy?** \r\n\r\nRun `python validate_setup.py` to verify your setup, then start with `/validate-setup` to begin your strategy development!"
        }
    ]
}